var Matter = "undefined" != typeof require ? require("matter-js") : window.Matter; !function () { "use strict"; function a(a) { function c() { Crafty.e(p + ", Color").attr({ x: b.world.bounds.min.x, y: b.world.bounds.min.y, w: b.world.bounds.max.x - b.world.bounds.min.x, h: b.world.bounds.max.y - b.world.bounds.min.y, alpha: .5 }).color("green") } function d(a) { var b = 2, c = Crafty.e(p), d = Crafty.e(p + ", Color"), e = Crafty.e(p + ", Color"), f = Crafty.e(p + ", Color"), g = Crafty.e(p + ", Color"), h = Crafty.e(p + ", Color"); c.attach(d), c.attach(e), c.attach(f), c.attach(g), c.attach(h); for (var i = { x: a.vertices[0].x, y: a.vertices[0].y, w: a.vertices[0].x, h: a.vertices[0].y }, j = 1; j < a.vertices.length; j++)a.vertices[j].x < i.x && (i.x = a.vertices[j].x), a.vertices[j].y < i.y && (i.y = a.vertices[j].y), a.vertices[j].x > i.w && (i.w = a.vertices[j].x), a.vertices[j].y > i.h && (i.h = a.vertices[j].y); return c.attr({ x: i.x, y: i.y, w: Math.abs(i.w - i.x), h: Math.abs(i.h - i.y) }), c.origin("center"), d.color("blue"), d.alpha = .5, d.z = c._z + 1, d.origin("center"), e.color("blue"), e.h = b, e.z = c._z + 1, e.origin("center"), f.color("blue"), f.x = d._x + (d._w - b), f.w = b, f.z = c._z + 1, f.origin("center"), g.color("blue"), g.y = d._y + (d._h - b), g.h = b, g.z = c._z + 1, g.origin("center"), h.color("blue"), h.w = b, h.z = c._z + 1, h.origin("center"), c } function e(a) { a._debugBody.x = a._x, a._debugBody.y = a._y } function f(a) { a[0]._debugBody.rotation = a[1] } function g(a, b) { return this.debugAllowed ? this[a](b) : void 0 } var h = a || !1, i = { debugAllowed: h }; return i.worldDebug = g.bind(i, "worldDebugAllowed"), i.generateDebugBody = g.bind(i, "generateDebugBodyAllowed"), i.moveEntity = g.bind(i, "moveEntityAllowed"), i.rotateEntity = g.bind(i, "rotateEntityAllowed"), i.worldDebugAllowed = c, i.generateDebugBodyAllowed = d, i.moveEntityAllowed = e, i.rotateEntityAllowed = f, i } var b, c, d = Matter.Bodies, e = Matter.Body, f = Matter.Bounds, g = Matter.Common, h = Matter.Composite, i = Matter.Engine, j = Matter.Events, k = (Matter.Mouse, Matter.Runner), l = Matter.Vector, m = Matter.World, n = a(!1), o = [], p = "2D, DOM", q = {}; !function (a) { a.create = function (b) { var c = { controller: a, element: null, options: { width: 640, height: 960, wireframeBackground: "#222", hasBounds: !1, enabled: !0, wireframes: !1, showSleeping: !0, showDebug: !1, showBroadphase: !1, showBounds: !1, showVelocity: !1, showCollisions: !1, showSeparations: !1, showAxes: !1, showPositions: !1, showAngleIndicator: !1, showIds: !1, showShadows: !1, showVertexNumbers: !1, showConvexHulls: !1, showInternalEdges: !1 } }, d = g.extend(c, b); return d.textures = {}, d.bounds = d.bounds || { min: { x: 0, y: 0 }, max: { x: d.options.width, y: d.options.height } }, d }, a.world = function (b) { var c, d, e, g, i, j, k, m = b.render, o = b.world, p = m.options, q = h.allBodies(o), r = h.allConstraints(o), s = [], t = []; if (p.hasBounds) { for (k = 0; k < q.length; k++)c = q[k], f.overlaps(c.bounds, m.bounds) && s.push(c); for (k = 0; k < r.length; k++)d = r[k], e = d.bodyA, g = d.bodyB, i = d.pointA, j = d.pointB, e && (i = l.add(e.position, d.pointA)), g && (j = l.add(g.position, d.pointB)), i && j && (f.contains(m.bounds, i) || f.contains(m.bounds, j)) && t.push(d) } else t = r, s = q; a.bodies(b, s), n.debugAllowed && a.constraints(t), p.showDebug && a.debug(b) }, a.debug = function (a) { var c = b(a.world.bounds.max.x, a.world.bounds.max.y); c.width = a.world.bounds.max.x, c.height = a.world.bounds.max.y, c.style.zIndex = 8, c.style.position = "absolute"; var d = c.getContext("2d"), e = a.world, f = a.render, g = f.options, i = h.allBodies(e), j = "    "; if (document.body.appendChild(c), a.timing.timestamp - (f.debugTimestamp || 0) >= 500) { var k = ""; k += "fps: " + Math.round(a.timing.fps) + j, a.metrics.extended && (k += "delta: " + a.timing.delta.toFixed(3) + j, k += "correction: " + a.timing.correction.toFixed(3) + j, k += "bodies: " + i.length + j, a.broadphase.controller === Grid && (k += "buckets: " + a.metrics.buckets + j), k += "\n", k += "collisions: " + a.metrics.collisions + j, k += "pairs: " + a.pairs.list.length + j, k += "broad: " + a.metrics.broadEff + j, k += "mid: " + a.metrics.midEff + j, k += "narrow: " + a.metrics.narrowEff + j), f.debugString = k, f.debugTimestamp = a.timing.timestamp } if (f.debugString) { d.font = "12px Arial", g.wireframes ? d.fillStyle = "rgba(255,255,255,0.5)" : d.fillStyle = "rgba(0,0,0,0.5)"; for (var l = f.debugString.split("\n"), m = 0; m < l.length; m++)d.fillText(l[m], 50, 50 + 18 * m) } }, a.constraints = function (a) { for (var b, c, d, f, g = 0; g < a.length; g++)b = a[g], b.render.visible && b.pointA && b.pointB && (b.entity || (b.entity = Crafty.e(p + ", Color").color("white")), b.entity.h = .005 * Crafty.viewport.height, c = b.bodyA, d = b.bodyB, c ? (b.entity.x = c.position.x + b.pointA.x, b.entity.y = c.position.y + b.pointA.y) : (b.entity.x = b.pointA.x, b.entity.y = b.pointA.y), f = d ? { x: d.position.x + b.pointB.x, y: d.position.y + b.pointB.y } : { x: b.pointB.x, y: b.pointB.y }, b.entity.w = e({ x: b.entity._x, y: b.entity._y }, f), b.entity.rotation = i({ x: b.entity._x, y: b.entity._y }, f)) }, a.bodies = function (a, b) { var d, e, f, g, h = a.render, i = h.options; for (f = 0; f < b.length; f++)if (d = b[f], e = d.entity, d.render.visible) if (d.parts) for (g = d.parts.length > 1 ? 1 : 0; g < d.parts.length; g++)c(i, d.parts[g], d.isSleeping); else c(i, d, d.isSleeping) }; var b = function (a, b) { var c = document.createElement("canvas"); return c.width = a, c.height = b, c.oncontextmenu = function () { return !1 }, c.onselectstart = function () { return !1 }, c }, c = function (a, b, c) { var e = b.entity; a.showSleeping && c && (e.alpha = .5), e._x !== b.position.x - e._w / 2 && (e.matterMoved = !0, e.x = b.position.x - e._w / 2), e._y !== b.position.y - e._h / 2 && (e.matterMoved = !0, e.y = b.position.y - e._h / 2), n.moveEntity(e), d(e, b.angle) }, d = function (a, b) { var c = Crafty.math.radToDeg(b).toFixed(3); 0 !== b && a._rotation !== c && (a.matterMoved = !0, a.rotation = c, n.rotateEntity([a, c])) }, e = function (a, b) { var c = j(a, b); return l.magnitude(c) }, i = function (a, b) { var c = j(a, b); return -Crafty.math.radToDeg(Math.atan2(c.y, c.x)).toFixed(3) }, j = function (a, b) { return { x: b.x - a.x, y: -(b.y - a.y) } } }(q), Crafty.extend({ Matter: function () { return { init: function (a) { b = i.create({ render: { controller: q, options: { width: Crafty.viewport.width, height: Crafty.viewport.height, hasBounds: a.hasBounds || !1, showDebug: !1 } }, world: { bounds: a.bounds || { min: { x: 0, y: 0 }, max: { x: Crafty.viewport.width, y: Crafty.viewport.height } } } }), c = k.create(), a && (a.debug && (n.debugAllowed = a.debug), a.gravity && (b.world.gravity = a.gravity), a.size && (b.world.bounds.max = { x: a.size.x, y: a.size.y }), a.renderingMode && ("Canvas" === a.renderingMode ? p = "2D, Canvas" : "WebGL" === a.renderingMode && (p = "2D, WebGL"))), n.worldDebug(), r.propagateEvents(), Crafty.bind("EnterFrame", function (a) { k.tick(c, b, a.dt) }), this.engine = b, this.world = b.world, this.runner = c }, destroy: function () { }, engine: {}, world: {} } }() }), Crafty.c("Matter", function () { var a = function (a) { var c = { x: a.x || 0, y: a.y || 0, w: a.w || 0, h: a.h || 0 }; this.origin(c.w / 2, c.h / 2), o.push(this); var f = {}; if (a.matter && (f = a.matter), g.extend(f, this._matter, !0), f.shape && "circle" === f.shape) { var h = c.w / 2; a.matter.radius && (h = a.matter.radius), this._body = d.circle(c.x + c.w / 2, c.y + c.h / 2, h, f) } else this._body = d.rectangle(c.x + c.w / 2, c.y + c.h / 2, c.w, c.h, f); this._body.entity = this, this.matterMoved = !1, this._debugBody = n.generateDebugBody(this._body), a.rotation && e.setAngle(this._body, Crafty.math.degToRad(a.rotation)), m.addBody(b.world, this._body) }; return { init: function () { this._matter = {}, this.requires("2D"), this.bind("Change", function (b) { return b && b.hasOwnProperty("x") && b.hasOwnProperty("y") ? a.call(this, b) : void 0 }.bind(this)), this.bind("Move", function () { this.matterMoved || "undefined" == typeof this._body ? this.matterMoved = !1 : e.setPosition(this._body, { x: this._x + this._w / 2, y: this._y + this._h / 2 }) }.bind(this)), this.bind("Rotate", function () { this.matterMoved ? this.matterMoved = !1 : e.setAngle(this._body, Crafty.math.degToRad(this.rotation)) }.bind(this)) }, remove: function () { m.remove(b.world, this._body, !0), "undefined" != typeof this._debugBody && this._debugBody.destroy() }, matter: function (a) { return g.extend(this._matter, a, !0), this } } }()); var r = function () { var a = function () { ["collisionStart", "collisionEnd", "collisionActive"].forEach(function (a) { j.on(b, a, function (b) { for (var c = b.pairs, d = 0; d < c.length; d++) { var e = c[d], f = a.charAt(0).toUpperCase() + a.slice(1); e.bodyA.entity.trigger(f, { target: e.bodyB.entity, event: b }), e.bodyB.entity.trigger(f, { target: e.bodyA.entity, event: b }) } }) }) }; return { propagateEvents: a } }() }();